services:
  postgres:
    image: postgres:15
    container_name: postgres
    env_file:
      - ./.environment/.env.postgres
    networks:
      - backend
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      retries: 5
      start_period: 10s


  pgbouncer:
    image: edoburu/pgbouncer
    container_name: pgbouncer
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - ./.environment/.env.pgBouncer
    networks:
      - backend
    ports:
      - "6432:5432"   
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "pgbouncer", "-p", "5432"]
      interval: 5s
      retries: 5
      start_period: 5s

  redis:
    image: redis:7
    container_name: redis
    networks:
      - backend
    ports:
      - "6379:6379"

  backend:
    build: ./drf-app
    container_name: drf_backend
    env_file:
      - ./.environment/.env.drf
    depends_on:
      pgbouncer:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - backend
    expose:
      - "8000"

  kong:
    image: kong:3.7
    container_name: kong
    depends_on:
      - backend
      - redis
    env_file:
      - ./.environment/.env.kong
    volumes:
      - ./kong/kong.yaml:/etc/kong/kong.yaml
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yaml
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_STATUS_LISTEN: "0.0.0.0:8100"
    networks:
      - backend
    ports:
      - "8000:8000"   
      - "8001:8001" 
      - "8100:8100"

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - backend
      - kong
    networks:
      - backend
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana
    container_name: grafana
    networks:
      - backend
    ports:
      - "3000:3000"

networks:
  backend:
    driver: bridge

volumes:
  postgres_data:
